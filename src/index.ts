import { app, BrowserWindow, ipcMain, globalShortcut, Tray } from 'electron';
import { menubar } from 'menubar';
import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const GLOBAL_WINDOW_WEBPACK_ENTRY: string;
declare const GLOBAL_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const TRAY_WINDOW_WEBPACK_ENTRY: string;
declare const TRAY_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isQuitting = false;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let globalWindow: BrowserWindow | null;

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

const createGlobalWindow = (): void => {
  globalWindow = new BrowserWindow({
    alwaysOnTop: false,
    transparent: true,
    frame: false,
    show: false,
    height: 600,
    width: 600,
    webPreferences: {
      preload: GLOBAL_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  globalWindow.loadURL(GLOBAL_WINDOW_WEBPACK_ENTRY);
}

const onReady = () => {
  createWindow();
  createGlobalWindow();

  globalWindow.on('close', (ev) => {
    if (!isQuitting) {
      ev.preventDefault();
      globalWindow.webContents.send('closeCreate');
      globalWindow.hide();
    }
  });

  ipcMain.handle('openGlobal', () => {
    globalWindow.show();
    globalWindow.focus();
  });

  ipcMain.handle('closeClobal', () => {
    globalWindow.webContents.send('closeGlobal');
    globalWindow.hide();
  });

  globalShortcut.register('CommandOrControl+Shift+C', () => {
    globalWindow.show();
    globalWindow.focus();
  });


  const mb = menubar({
    index: TRAY_WINDOW_WEBPACK_ENTRY,
    icon: path.join(__dirname, "../../src/iconTemplate.png"),
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', onReady);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
